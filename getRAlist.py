#!/usr/lib/python
from optparse import OptionParser
import numpy as np
import matplotlib.pyplot as plt

msg_usage = 'usage: %prog [-R] real_file [-F] fb_file [-G] gatk_file [-S] sb_file'
descr ='''Caculate the each files' A and R of common snp site which recorded in
common_file. The results will used to plot which compare the accuracy among
the three Callers.
'''
optparser = OptionParser(usage = msg_usage, description = descr)
optparser.add_option('-R', '--real', dest = 'realfile',
                     help = 'Input the common file recording common snp sites info.')
optparser.add_option('-F', '--fb', dest = 'fbfile',
                     help = 'Input the vcf file generated by freebays.')
optparser.add_option('-G', '--gatk', dest = 'gatkfile',
                     help = 'Input the vcf file generated by GATK.')
optparser.add_option('-S', '--sb', dest = 'sbfile',
                     help = 'Input the vcf file generated by samtools.')
options, args = optparser.parse_args()

def listforplot(realfile, fbfile, gatkfile, sbfile):
    f0 =open(realfile)
    positions_str = []
    real_R = []
    real_A =[]
    for i in f0:
        positions_str.append(i.split()[1])
        bases = i.split()[3:7]
        neworder = sorted(bases, key = lambda x : int(x), reverse = True)
        if i.split()[2] == 'A':
            real_R.append(int(bases[0]))
            if neworder[0] != bases[0]:
                real_A.append(int(neworder[0]))
            else:
                real_A.append(int(neworder[1]))
        if i.split()[2] == 'T':
            real_R.append(int(bases[1]))
            if neworder[0] != bases[1]:
                real_A.append(int(neworder[0]))
            else:
                real_A.append(int(neworder[1]))
        if i.split()[2] == 'C':
            real_R.append(int(bases[2]))
            if neworder[0] != bases[2]:
                real_A.append(int(neworder[0]))
            else:
                real_A.append(int(neworder[1]))
        if i.split()[2] == 'G':
            real_R.append(int(bases[3]))
            if neworder[0] != bases[3]:
                real_A.append(int(neworder[0]))
            else:
                real_A.append(int(neworder[1]))
    f0.close()

    fb = open(fbfile)
    fb_R = []
    fb_A = []
    for i in fb:
        if i.split()[1] in positions_str:
            fb_R.append(int(i.split()[-1].split(':')[2]))
            fb_A.append(int(i.split()[-1].split(':')[4]))
    fb.close()

    gatk = open(gatkfile)
    gatk_R = []
    gatk_A = []
    for i in gatk:
        if i.split()[1] in positions_str:
            gatk_R.append(int(i.split()[-1].split(':')[1].split(',')[0]))
            gatk_A.append(int(i.split()[-1].split(':')[1].split(',')[1]))
    gatk.close()

    sb = open(sbfile)
    sb_R = []
    sb_A = []
    for i in sb:
        if i.split()[1] in positions_str:
            info_dict = {}
            j = i.split()[7]
            items = j.split(';')
            for k in items:
                info_dict[k.split('=')[0]]=k.split('=')[1]
            if 'DP4' in info_dict:
                R = int(info_dict['DP4'].split(',')[0])+int(info_dict['DP4'].split(',')[1])
                A = int(info_dict['DP4'].split(',')[2])+int(info_dict['DP4'].split(',')[3])
                sb_R.append(R)
                sb_A.append(A)
            else:
                sb_R.append('norecord')
                sb_A.append('norecord')
    sb.close()
    positions = [int(i) for i in positions_str]
    print 'positions:\n%s\n%s\n'%(positions, len(positions))
    print 'real_R:\n%s\n%s\n'%(real_R, len(real_R))
    print 'real_A:\n%s\n%s\n'%(real_A, len(real_A))
    print 'fb_R:\n%s\n%s\n'%(fb_R, len(fb_R))
    print 'fb_A:\n%s\n%s\n'%(fb_A, len(fb_A))
    print 'gatk_R:\n%s\n%s\n'%(gatk_R, len(gatk_R))
    print 'gatk_A:\n%s\n%s\n'%(gatk_A, len(gatk_A))
    print 'sb_R:\n%s\n%s\n'%(sb_R, len(sb_R))
    print 'sb_A:\n%s\n%s\n'%(sb_A, len(sb_A))
    return positions, real_R, real_A, fb_R, fb_A, gatk_R, gatk_A, sb_R, sb_A

def do_plot(realfile, fbfile, gatkfile, sbfile):
    positions, real_R, real_A, fb_R, fb_A, gatk_R, gatk_A, sb_R, sb_A = \
listforplot(realfile, fbfile, gatkfile, sbfile)
    pos = np.array(positions)
    pos_max = max(pos)
    pos_min = min(pos)
    realR = np.array(real_R)
    realA = np.array(real_A)
    fbR = np.array(fb_R)
    fbA = np.array(fb_A)
    gatkR = np.array(gatk_R)
    gatkA = np.array(gatk_A)
    sbR = np.array(sb_R)
    sbA = np.array(sb_A)

    real_fb_R = realR - fbR
    real_gatk_R = realR - gatkR
    real_sb_R = realR - sbR
    real_fb_A = realA - fbA
    real_gatk_A = realA - gatkA
    real_sb_A = realA - sbA

    real_fb_R_max = max(real_fb_R)
    real_gatk_R_max = max(real_gatk_R)
    real_sb_R_max = max(real_sb_R)
    R_max = max(real_fb_R_max, real_gatk_R_max, real_sb_R_max)

    real_fb_A_max = max(real_fb_A)
    real_gatk_A_max = max(real_gatk_A)
    real_sb_A_max = max(real_sb_A)
    A_max = max(real_fb_A_max, real_gatk_A_max, real_sb_A_max)

    real_fb_R_min = min(real_fb_R)
    real_gatk_R_min = min(real_gatk_R)
    real_sb_R_min = min(real_sb_R)
    R_min = min(real_fb_A_min, real_gatk_A_min, real_sb_A_min)


    real_fb_A_min = min(real_fb_A)
    real_gatk_A_min = min(real_gatk_A)
    real_sb_A_min = min(real_sb_A)
    A_min = min(real_fb_A_min, real_gatk_A_min, real_sb_A_min)

    plt.figure(1)
    plt.subplot(1,1,1)
    plt.axis([pos_min, pos_max, R_min, R_max])
    plt.title('R accuracy')
    plt.xlabe('SNP sites')
    plt.ylabe('callersR-realR')

    fblineR, = plt.plot(pos, real_fb_R, 'bs-')
    gatklineR, = plt.plot(pos, real_gatk_R, 'r^-'),
    sblineR, = plt.plot(pos, real_sb_R, 'yo-')
    plt.legend([fblineR, gatklineR, sblineR], ['freebayes', 'GATK', 'samtools'])
    plt.savefig('R_accuracy.pdf')

    plt.figure(2)
    plt.subplot(1,1,1)
    plt.axis([pos_min, pos_max, A_min, A_max])
    plt.title('A accuracy')
    plt.xlabe('SNP sites')
    plt.ylabe('callersA-realA')

    fblineA, = plt.plot(pos, real_fb_A, 'bs-')
    gatklineA, = plt.plot(pos, real_gatk_A, 'r^-'),
    sblineA, = plt.plot(pos, real_sb_A, 'yo-')
    plt.legend([fblineA, gatklineA, sblineA], ['freebayes', 'GATK', 'samtools'])
    plt.savefig('A_accuracy.pdf')



if __name__ == '__main__':
    r = options.realfile
    f = options.fbfile
    g = options.gatkfile
    s = options.sbfile
#    listforplot(r, f, g, s)
    do_plot(r, f, g, s)

