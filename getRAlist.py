#!/usr/lib/python
from optparse import OptionParser

msg_usage = 'usage: %prog [-C] common_file [-F] fb_file [-G] gatk_file [-S] sb_file'
descr ='''Caculate the each files' A and R of common snp site which recorded in
common_file. The results will used to plot which compare the accuracy between
the three Callers.
'''
optparser = OptionParser(usage = msg_usage, description = descr)
optparser.add_option('-C', '--common', dest = 'commonfile',
                     help = 'Input the common file recording common snp sites info.')
optparser.add_option('-F', '--fb', dest = 'fbfile',
                     help = 'Input the vcf file generated by freebays.')
optparser.add_option('-G', '--gatk', dest = 'gatkfile',
                     help = 'Input the vcf file generated by GATK.')
optparser.add_option('-S', '--sb', dest = 'sbfile',
                     help = 'Input the vcf file generated by samtools.')
options, args = optparser.parse_args()

def listforplot(commonsite, fbfile, gatkfile, sbfile):
    f0 =open(commonsite)
    positions = []
    common_R = []
    common_A =[]
    for i in f0:
        positions.append(i.split()[1])
        bases = i.split()[3:7]
        neworder = sorted(bases, key = lambda x : int(x), reverse = True)
        if i.split()[2] == 'A':
            common_R.append(bases[0])
            if neworder[0] != bases[0]:
                common_A.append(neworder[0])
            else:
                common_A.append(neworder[1])
        if i.split()[2] == 'T':
            common_R.append(bases[1])
            if neworder[0] != bases[1]:
                common_A.append(neworder[0])
            else:
                common_A.append(neworder[1])
        if i.split()[2] == 'C':
            common_R.append(bases[2])
            if neworder[0] != bases[2]:
                common_A.append(neworder[0])
            else:
                common_A.append(neworder[1])
        if i.split()[2] == 'G':
            common_R.append(bases[3])
            if neworder[0] != bases[3]:
                common_A.append(neworder[0])
            else:
                common_A.append(neworder[1])
    f0.close()

    fb = open(fbfile)
    fb_R = []
    fb_A = []
    for i in fb:
        if i.split()[1] in positions:
            fb_R.append(i.split()[-1].split(':')[2])
            fb_A.append(i.split()[-1].split(':')[4])
    fb.close()

    gatk = open(gatkfile)
    gatk_R = []
    gatk_A = []
    for i in gatk:
        if i.split()[1] in positions:
            gatk_R.append(i.split()[-1].split(':')[1].split(',')[0])
            gatk_A.append(i.split()[-1].split(':')[1].split(',')[0])
    gatk.close()

    sb = open(sbfile)
    sb_R = []
    sb_A = []
    for i in sb:
        if i.split()[1] in positions:
            info_dict = {}
            j = i.split()[7]
            items = j.split(';')
            for k in items:
                info_dict[k.split('=')[0]]=k.split('=')[1]
            if 'DP4' in info_dict:
                R = int(info_dict['DP4'].split(',')[0])+int(info_dict['DP4'].split(',')[1])
                A = int(info_dict['DP4'].split(',')[2])+int(info_dict['DP4'].split(',')[3])
                sb_R.append(R)
                sb_A.append(A)
            else:
                sb_R.append('norecord')
                sb_A.append('norecord')
    sb.close()
    print common_R, common_A, fb_R, fb_A, gatk_R, gatk_A, sb_R, sb_A
    return common_R, common_A, fb_R, fb_A, gatk_R, gatk_A, sb_R, sb_A

if __name__ == '__main__':
    c = options.commonfile
    f = options.fbfile
    g = options.gatkfile
    s = options.sbfile
    listforplot(c, f, g, s)


